# -*- coding: utf-8 -*-

import J2534
from J2534.Define import *


# print list off tools installed on your computer...

print(J2534.toolLIST())



# use pretty list above to choose the index of the tool you will be using...

J2534.setDevice(1)



# open connection to tool, tool will return device id...
# ret will return 0 which means no errors detected...

ret, deviceID = J2534.ptOpen()



# connect channel with protocol and baudrate...
# returns channel id which gets passed to ecm filter...

ret, channelID = J2534.ptConnect(deviceID, 
                                ProtocolID.SCI_B_ENGINE, 
                                0, 
                                BaudRate.SCI)
                                
                                

# start sci pass block filter...

J2534.ptStartEcmFilter(channelID, 
              ProtocolID.SCI_B_ENGINE, 
              [0], 
              [0], 
              [0], 
              0, 
              0)
              
              

# set up interframe timing...

J2534.SetConfig(channelID, 
              [[Parameter.T1_MAX, 75], 
              [Parameter.T2_MAX, 5], 
              [Parameter.T4_MAX, 50], 
              [Parameter.T5_MAX, 1]])
              
              

# set transmit data structure

Tx = J2534.ptTxMsg(ProtocolID.SCI_B_ENGINE, 0, 0)


# set recv data structure...

Rx = J2534.ptRxMsg(ProtocolID.SCI_B_ENGINE, 0, 0)




# Set data string...

Tx.SetDataString([0x22, 0x20, 0x07, 0x49])



# transmit message, ret will return 0 if successful...

J2534.ptWtiteMsgs(channelID, Tx, 1, 500)



# read message, ret will return 0 if no errors detected...

J2534.ptReadMsgs(channelID, Rx, 1, 500)



# print data from buffer...

print(Rx.Dump())



# close channel...

J2534.ptDisconnect(channelID)



# close tool connect...

J2534.ptClose(deviceID)


