# -*- coding: utf-8 -*-

import os
from prettytable import PrettyTable
import J2534
from J2534.Define import *
import ctypes as ct

# list installed tools
print(J2534.toolLIST()) 


# set device to index of tool you wish to use
J2534.setDevice(1) 


# open connection to selected tool
ret, deviceID = J2534.ptOpen()  


# open can bus channel with selected baudrate
ret, channelID = J2534.ptConnect(deviceID, ProtocolID.ISO15765, 0, BaudRate.CAN_500k)  


#  set can flow control filters
J2534.ptStartEcmFilter(
    channelID, 
    ProtocolID.ISO15765, 
    [255, 255, 255, 255],             # set filter mask
    [0, 0, 7, 232],                   # set recv address
    [0, 0, 7, 224],                   # set transmit address
    TxFlags.ISO15765_FRAME_PAD,       # set flag needed
    0)


# set transmit message structure with selected flag
Tx = J2534.ptTxMsg(ProtocolID.ISO15765, TxFlags.ISO15765_FRAME_PAD, 0) 

# set recv message structure
Rx = J2534.ptRxMsg(ProtocolID.ISO15765, 0, 0)  # set recv message structure


# set data to be transmitted on bus
Tx.SetDataString([0x00, 0x00, 0x07, 0xe0, 0x09, 0x02])  


# transmit that shit!!
J2534.ptWtiteMsgs(channelID, Tx, 1, 250)  


# read data from ecu
for _ in range(3):  
    J2534.ptReadMsgs(channelID, Rx, 1, 250) 


# rx dump will print a nice formatted data output for you 
print(Rx.Dump()) 

# close channel...
J2534.ptDisconnect(channelID)

# close tool connect...
J2534.ptClose(deviceID)







