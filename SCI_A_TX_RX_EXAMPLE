# -*- coding: utf-8 -*-
import J2534
from J2534.Define import *


# print list off tools installed on your computer...
print(J2534.toolLIST())

# use pretty list above to choose the index of the tool you will be using...
J2534.setDevice(1)

# open connection to tool and grab divice id...
# ret will return 0 which means no errors detected...
ret, deviceID = J2534.ptOpen()

# connect channel with correct comm protocol and baudrate...
# also returns channel id which gets passed to ecm filter...
ret, channelID = J2534.ptConnect(deviceID, ProtocolID.SCI_A_ENGINE, 0, BaudRate.SCI)

# start sci pass block filter...
J2534.ptStartEcmFilter(channelID, ProtocolID.SCI_A_ENGINE, [0], [0], [0], 0, TxFlags.SCI_MODE)

# set transmit data structure
Tx = J2534.ptTxMsg(ProtocolID.SCI_A_ENGINE, TxFlags.SCI_MODE, 0)

# set recv data structure...
Rx = J2534.ptRxMsg(ProtocolID.SCI_A_ENGINE, 0, 0)


# transmit data string, 28, 00, 62 is how chrysler pings ecu
# which is also returns first digit of vin number...
Tx.SetDataString([0x28, 0x00, 0x62])

# transmit message that was set with Tx.SetDataString([0x28, 0x00, 0x62]) will return 0 if successful...
J2534.ptWtiteMsgs(channelID, Tx, 1, 500)

# read message will return 0 if no errors detected
J2534.ptReadMsgs(channelID, Rx, 1, 500)

# print data that was recv...
print(Rx.Dump())

# close channel...
J2534.ptDisconnect(channelID)

# close tool connect...
J2534.ptClose(deviceID)
